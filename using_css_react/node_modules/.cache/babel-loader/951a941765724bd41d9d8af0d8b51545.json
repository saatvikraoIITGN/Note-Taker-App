{"ast":null,"code":"// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js';\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative' && typeof crypto === 'undefined') {\n    throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' + 'For secure IDs, import `react-native-get-random-values` ' + 'before Nano ID.');\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error('Import file with `if (!window.crypto) window.crypto = window.msCrypto`' + ' before importing Nano ID to fix IE 11 support');\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes));\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~(1.6 * mask * size / alphabet.length);\n  return () => {\n    let id = '';\n    while (true) {\n      let bytes = getRandom(step);\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step;\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random);\nlet nanoid = function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  let id = '';\n  let bytes = crypto.getRandomValues(new Uint8Array(size));\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63;\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte < 63) {\n      id += '_';\n    } else {\n      id += '-';\n    }\n  }\n  return id;\n};\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random };","map":{"version":3,"names":["urlAlphabet","process","env","NODE_ENV","navigator","product","crypto","Error","msCrypto","random","bytes","getRandomValues","Uint8Array","customRandom","alphabet","size","getRandom","mask","Math","log","length","LN2","step","id","j","customAlphabet","nanoid","arguments","undefined","byte","toString","toUpperCase"],"sources":["/Users/saatvikrao/Desktop/VS Code Files/Note-Taker-App/using_css_react/node_modules/nanoid/index.browser.js"],"sourcesContent":["// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"mappings":"AAAA;AACA;;AAEA,SAASA,WAAW,QAAQ,yBAAyB;AAErD,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzC;EACA,IACE,OAAOC,SAAS,KAAK,WAAW,IAChCA,SAAS,CAACC,OAAO,KAAK,aAAa,IACnC,OAAOC,MAAM,KAAK,WAAW,EAC7B;IACA,MAAM,IAAIC,KAAK,CACb,iEAAiE,GAC/D,+DAA+D,GAC/D,0DAA0D,GAC1D,iBACJ,CAAC;EACH;EACA,IAAI,OAAOC,QAAQ,KAAK,WAAW,IAAI,OAAOF,MAAM,KAAK,WAAW,EAAE;IACpE,MAAM,IAAIC,KAAK,CACb,wEAAwE,GACtE,gDACJ,CAAC;EACH;EACA,IAAI,OAAOD,MAAM,KAAK,WAAW,EAAE;IACjC,MAAM,IAAIC,KAAK,CACb,sDAAsD,GACpD,qEACJ,CAAC;EACH;AACF;AAEA,IAAIE,MAAM,GAAGC,KAAK,IAAIJ,MAAM,CAACK,eAAe,CAAC,IAAIC,UAAU,CAACF,KAAK,CAAC,CAAC;AAEnE,IAAIG,YAAY,GAAGA,CAACC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,KAAK;EAChD;EACA;EACA;EACA;EACA;EACA,IAAIC,IAAI,GAAG,CAAC,CAAC,IAAKC,IAAI,CAACC,GAAG,CAACL,QAAQ,CAACM,MAAM,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACG,GAAI,IAAI,CAAC;EAChE;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA,IAAIC,IAAI,GAAG,CAAC,EAAG,GAAG,GAAGL,IAAI,GAAGF,IAAI,GAAID,QAAQ,CAACM,MAAM,CAAC;EAEpD,OAAO,MAAM;IACX,IAAIG,EAAE,GAAG,EAAE;IACX,OAAO,IAAI,EAAE;MACX,IAAIb,KAAK,GAAGM,SAAS,CAACM,IAAI,CAAC;MAC3B;MACA,IAAIE,CAAC,GAAGF,IAAI;MACZ,OAAOE,CAAC,EAAE,EAAE;QACV;QACAD,EAAE,IAAIT,QAAQ,CAACJ,KAAK,CAACc,CAAC,CAAC,GAAGP,IAAI,CAAC,IAAI,EAAE;QACrC,IAAIM,EAAE,CAACH,MAAM,KAAKL,IAAI,EAAE,OAAOQ,EAAE;MACnC;IACF;EACF,CAAC;AACH,CAAC;AAED,IAAIE,cAAc,GAAGA,CAACX,QAAQ,EAAEC,IAAI,KAAKF,YAAY,CAACC,QAAQ,EAAEC,IAAI,EAAEN,MAAM,CAAC;AAE7E,IAAIiB,MAAM,GAAG,SAAAA,CAAA,EAAe;EAAA,IAAdX,IAAI,GAAAY,SAAA,CAAAP,MAAA,QAAAO,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EACrB,IAAIJ,EAAE,GAAG,EAAE;EACX,IAAIb,KAAK,GAAGJ,MAAM,CAACK,eAAe,CAAC,IAAIC,UAAU,CAACG,IAAI,CAAC,CAAC;;EAExD;EACA,OAAOA,IAAI,EAAE,EAAE;IACb;IACA;IACA;IACA;IACA;IACA,IAAIc,IAAI,GAAGnB,KAAK,CAACK,IAAI,CAAC,GAAG,EAAE;IAC3B,IAAIc,IAAI,GAAG,EAAE,EAAE;MACb;MACAN,EAAE,IAAIM,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC;IACzB,CAAC,MAAM,IAAID,IAAI,GAAG,EAAE,EAAE;MACpB;MACAN,EAAE,IAAI,CAACM,IAAI,GAAG,EAAE,EAAEC,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;IAC9C,CAAC,MAAM,IAAIF,IAAI,GAAG,EAAE,EAAE;MACpBN,EAAE,IAAI,GAAG;IACX,CAAC,MAAM;MACLA,EAAE,IAAI,GAAG;IACX;EACF;EACA,OAAOA,EAAE;AACX,CAAC;AAED,SAASG,MAAM,EAAED,cAAc,EAAEZ,YAAY,EAAEb,WAAW,EAAES,MAAM"},"metadata":{},"sourceType":"module"}